// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
import TelegramBot from 'node-telegram-bot-api';
import {
    runQuery,
    closeDB,
    getQuoteById,
    deleteQuoteById,
    updateQuoteById,
    searchQuotesWithPagination,
    saveQuoteToDatabase,
    getMuteStatus,
    setMuteStatus
} from './db.js'; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –∫ db.js –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
import fetch from 'node-fetch';
import 'dotenv/config';

// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const token = process.env.BOT_TOKEN;
if (!token) {
    console.error('BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
    process.exit(1); // –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new TelegramBot(token, { polling: true });
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');

// –ö–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const chatContext = {};

// –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è bot.sendMessage
async function sendBotMessage(chatId, text, options = {}) {
    const mute = await getMuteStatus(chatId);
    const mergedOptions = { ...options, disable_notification: mute };
    return bot.sendMessage(chatId, text, mergedOptions);
}

// –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è bot.editMessageText
async function editBotMessageText(text, options = {}) {
    const chatId = options.chat_id;  // chatId –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ options
    if (!chatId) {
        console.error("editBotMessageText: chat_id is required in options!"); // –í–∞–∂–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞!
        return; // –ò–ª–∏ –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É: throw new Error("...");
    }
    const messageId = options.message_id; // message_id —Ç–æ–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å
    if (!messageId) {
         console.error("editBotMessageText: message_id is required in options!"); // –í–∞–∂–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞!
        return; // –ò–ª–∏ –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É: throw new Error("...");
    }
    const mute = await getMuteStatus(chatId);
    const mergedOptions = { ...options, disable_notification: mute };
    return bot.editMessageText(text, mergedOptions);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
async function createMainKeyboard(chatId) {
    const mute = await getMuteStatus(chatId);
    return {
        reply_markup: {
            keyboard: [
                [{ text: '–ü–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É' }, { text: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–∏—Ç–∞—Ç—É' }],
                [{ text: '–ú–æ–∏ —Ü–∏—Ç–∞—Ç—ã' }, { text: '–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é' }, { text: '–ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞' }],
                [{ text: mute ? 'üîî –í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫' : 'üîï –û—Ç–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫' }]
            ],
            resize_keyboard: true
        }
    };
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å —Ü–∏—Ç–∞—Ç–∞–º–∏ (–∏–Ω–ª–∞–π–Ω)
function createQuoteKeyboard() {
    return {
        reply_markup: {
            inline_keyboard: [
                [{ text: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–∏—Ç–∞—Ç—É', callback_data: 'save_quote' }],
                [{ text: '–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é —Ü–∏—Ç–∞—Ç—É', callback_data: 'get_new_quote' }]
            ]
        }
    };
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å–≤–æ–∏—Ö —Ü–∏—Ç–∞—Ç (–∏–Ω–ª–∞–π–Ω)
async function createCategoryKeyboard() {
    const rows = await runQuery(`SELECT name FROM categories`);
    if (rows.length === 0) {
        return {
            reply_markup: {
                inline_keyboard: [[{ text: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç', callback_data: 'no_categories' }]]
            }
        };
    }
    const keyboard = { reply_markup: { inline_keyboard: [] } };
    let rowButtons = [];
    rows.forEach((row, index) => {
        rowButtons.push({ text: row.name, callback_data: `myquotes_category_${row.name}` });
        if ((index + 1) % 3 === 0 || index === rows.length - 1) {
            keyboard.reply_markup.inline_keyboard.push(rowButtons);
            rowButtons = [];
        }
    });
    return keyboard;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ü–∏—Ç–∞—Ç (–∏–Ω–ª–∞–π–Ω)
async function createShowCategoryKeyboard() {
    const rows = await runQuery(`SELECT name FROM categories`);
    if (rows.length === 0) {
        return {
            reply_markup: {
                inline_keyboard: [[{ text: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç', callback_data: 'no_categories' }]]
            }
        };
    }
    const keyboard = { reply_markup: { inline_keyboard: [] } };
    let rowButtons = [];
    rows.forEach((row, index) => {
        rowButtons.push({ text: row.name, callback_data: `showcategory_category_${row.name}` });
        if ((index + 1) % 3 === 0 || index === rows.length - 1) {
            keyboard.reply_markup.inline_keyboard.push(rowButtons);
            rowButtons = [];
        }
    });
    return keyboard;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç (–∏–Ω–ª–∞–π–Ω)
async function createSaveQuoteCategoryKeyboard() {
    const rows = await runQuery(`SELECT name FROM categories`);
    if (rows.length === 0) {
        return {
            reply_markup: {
                inline_keyboard: [[{ text: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç', callback_data: 'no_categories' }]]
            }
        };
    }
    const keyboard = { reply_markup: { inline_keyboard: [] } };
    let rowButtons = [];
    rows.forEach((row, index) => {
        rowButtons.push({ text: row.name, callback_data: `savequote_category_${row.name}` });
        if ((index + 1) % 3 === 0 || index === rows.length - 1) {
            keyboard.reply_markup.inline_keyboard.push(rowButtons);
            rowButtons = [];
        }
    });
    return keyboard;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API
async function getQuote() {
    try {
        const response = await fetch('http://api.forismatic.com/api/1.0/?method=getQuote&format=json&lang=ru');
        const data = await response.json();
        return `"${data.quoteText}" - ${data.quoteAuthor || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä'}`;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã –∏–∑ forismatic.com:', error.message);
        return '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É.';
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const welcomeMessage = `
–ü—Ä–∏–≤–µ—Ç!

–° —ç—Ç–∏–º –±–æ—Ç–æ–º —Ç—ã —Å—Ç–∞–Ω–µ—à—å —É–º–Ω–µ–µ!
–ù–æ —ç—Ç–æ –Ω–µ —Ç–æ—á–Ω–æ))
`;
    const mainKeyboard = await createMainKeyboard(chatId);
    await sendBotMessage(chatId, welcomeMessage, mainKeyboard);
});

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const messageText = msg.text;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –∑–≤—É–∫–∞
    if (messageText === 'üîî –í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫' || messageText === 'üîï –û—Ç–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫') {
        const mute = messageText === 'üîï –û—Ç–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫';
        await setMuteStatus(chatId, mute);
        const mainKeyboard = await createMainKeyboard(chatId);
        await sendBotMessage(chatId, mute ? 'üîá –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.' : 'üîä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã.', mainKeyboard);
        return;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã
    if (messageText === '–ü–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É') {
        try {
            const quote = await getQuote();
            await sendBotMessage(chatId, quote, { reply_markup: createQuoteKeyboard().reply_markup });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã:', error);
            await sendBotMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã.');
        }
        return;
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã
    if (messageText === '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–∏—Ç–∞—Ç—É') {
        chatContext[chatId] = { action: 'save_quote' };
        await sendBotMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã:');
        return;
    }

    // –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–∏—Ö —Ü–∏—Ç–∞—Ç
    if (messageText === '–ú–æ–∏ —Ü–∏—Ç–∞—Ç—ã') {
        try {
            const categoryKeyboard = await createCategoryKeyboard();
            await sendBotMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', categoryKeyboard);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
            await sendBotMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.');
        }
        return;
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–≤—Å–µ —Ü–∏—Ç–∞—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
    if (messageText === '–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é') {
        try {
            const categoryKeyboard = await createShowCategoryKeyboard();
            await sendBotMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', categoryKeyboard);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
            await sendBotMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.');
        }
        return;
    }

    // –ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞
    if (messageText === '–ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞') {
        await sendBotMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞:');
        chatContext[chatId] = { action: 'search_text' };
        return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞, –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    if (msg.text && !msg.entities) {
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã
        if (chatContext[chatId]?.action === 'save_quote') {
            chatContext[chatId].quoteText = msg.text;
            try {
                const categoryKeyboard = await createSaveQuoteCategoryKeyboard();
                await sendBotMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã:', categoryKeyboard);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
                await sendBotMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.');
                delete chatContext[chatId];
            }
            return;
        }

        // –ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞
        if (chatContext[chatId]?.action === 'search_text') {
            try {
                console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} –∏—â–µ—Ç —Ç–µ–∫—Å—Ç: "${messageText}"`);
                const results = await searchQuotesWithPagination(messageText, 10, 0);
                if (results.length > 0) {
                    const response = results
                        .map((result, index) => `${index + 1}. ${result}\n---\n`)
                        .join('\n');
                    await sendBotMessage(chatId, `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n${response}`, { parse_mode: 'HTML' });
                } else {
                    await sendBotMessage(chatId, `–¶–∏—Ç–∞—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö "${messageText}", –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`);
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ü–∏—Ç–∞—Ç:', error);
                await sendBotMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            }
            delete chatContext[chatId];
            return;
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–µ–π—Å—Ç–≤–∏—è —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π)
bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const messageId = query.message.message_id;
    const data = query.data;

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–∏—Ö —Ü–∏—Ç–∞—Ç
    if (data.startsWith('myquotes_category_')) {
        let category = data.split('myquotes_category_')[1];
        let page = 1;
        if (category.includes('_page:')) {
            const parts = category.split('_page:');
            category = parts[0];
            page = parseInt(parts[1], 10);
            if (isNaN(page) || page < 1) page = 1;
        }
        const limit = 5;
        const offset = (page - 1) * limit;

        try {
            const quotes = await getSavedQuotesFromDatabaseWithPagination(chatId, limit, offset, category);
            if (quotes.length === 0) {
                await sendBotMessage(chatId, `–£ –≤–∞—Å –Ω–µ—Ç —Ü–∏—Ç–∞—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category}" (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}).`);
            } else {
                const keyboard = {
                    inline_keyboard: quotes.map(quote => [
                        {
                            text: quote.text.length > 50 ? quote.text.substring(0, 50) + "..." : quote.text,
                            callback_data: `show_quote_${quote.id}`
                        }
                    ])
                };

                const totalQuotes = await runQuery(
                    `SELECT COUNT(*) as count FROM saved_quotes WHERE chatId = $1 AND category = $2`,
                    [chatId, category]
                );
                const totalCount = totalQuotes[0]?.count || 0;
                const totalPages = Math.ceil(totalCount / limit);

                const paginationButtons = [];
                if (page > 1) {
                    paginationButtons.push({ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: `myquotes_category_${category}_page:${page - 1}` });
                }
                paginationButtons.push({ text: `–°—Ç—Ä. ${page} –∏–∑ ${totalPages}`, callback_data: 'dummy' });
                if (page < totalPages) {
                    paginationButtons.push({ text: '–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è', callback_data: `myquotes_category_${category}_page:${page + 1}` });
                }

                if (paginationButtons.length > 0) {
                    keyboard.inline_keyboard.push(paginationButtons);
                }

                await sendBotMessage(chatId, `–¶–∏—Ç–∞—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category}" (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}):`, { reply_markup: keyboard });
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç:', error);
            await sendBotMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç.');
        }
        bot.answerCallbackQuery(query.id);
        return;
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å —Ü–∏—Ç–∞—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if (data.startsWith('showcategory_category_')) {
        const category = data.split('showcategory_category_')[1];
        try {
            const quotes = await getSavedQuotesFromDatabase(category);
            if (quotes.length === 0) {
                await sendBotMessage(chatId, `–¶–∏—Ç–∞—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category}" –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.`);
            } else {
                const response = quotes.map((quote, index) => `${index + 1}. ${quote.text}`).join('\n');
                await sendBotMessage(chatId, `–¶–∏—Ç–∞—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category}":\n${response}`);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç:', error);
            await sendBotMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç.');
        }
        bot.answerCallbackQuery(query.id);
        return;
    }

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–∏—Ç–∞—Ç—É
    if (data === 'save_quote') {
        const quoteText = query.message.text;
        chatContext[chatId] = { action: 'save_quote', quoteText };
        try {
            const categoryKeyboard = await createSaveQuoteCategoryKeyboard();
            await sendBotMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã:', categoryKeyboard);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
            await sendBotMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.');
            delete chatContext[chatId];
        }
        bot.answerCallbackQuery(query.id);
        return;
    }

    // –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é —Ü–∏—Ç–∞—Ç—É
    if (data === 'get_new_quote') {
        try {
            const newQuote = await getQuote();
            await editBotMessageText(newQuote, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: createQuoteKeyboard().reply_markup
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–π —Ü–∏—Ç–∞—Ç—ã:', error);
            await sendBotMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–π —Ü–∏—Ç–∞—Ç—ã.');
        }
        bot.answerCallbackQuery(query.id);
        return;
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã
    if (data.startsWith('savequote_category_')) {
        const category = data.split('savequote_category_')[1];
        const quoteText = chatContext[chatId]?.quoteText;
        if (quoteText) {
            try {
                await saveQuoteToDatabase(chatId, quoteText, category);
                await sendBotMessage(chatId, `–¶–∏—Ç–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${category}"!`);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã:', error);
                await sendBotMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã.');
            }

        } else {
            await sendBotMessage(chatId, '–¶–∏—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }
        delete chatContext[chatId];
        bot.answerCallbackQuery(query.id);
        return;
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ü–∏—Ç–∞—Ç—É
    else if (data.startsWith('show_quote_')) {
        const quoteId = data.split('show_quote_')[1];
        try {
            const quote = await getQuoteById(quoteId);
            if (quote) {
                const keyboard = {
                    inline_keyboard: [
                        [
                            { text: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data: `edit_quote_${quoteId}` },
                            { text: '–£–¥–∞–ª–∏—Ç—å', callback_data: `delete_quote_${quoteId}` }
                        ]
                    ]
                };
                await sendBotMessage(chatId, `–¶–∏—Ç–∞—Ç–∞: ${quote.text}`, { reply_markup: keyboard });
            } else {
                await sendBotMessage(chatId, '–¶–∏—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã:', error);
            await sendBotMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã.');
        }
        bot.answerCallbackQuery(query.id);
        return;
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —É–¥–∞–ª–∏—Ç—å —Ü–∏—Ç–∞—Ç—É
    else if (data.startsWith('delete_quote_')) {
        const quoteId = data.split('delete_quote_')[1];
        try {
            await deleteQuoteById(quoteId);
            await sendBotMessage(chatId, '–¶–∏—Ç–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã:', error);
            await sendBotMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã.');
        }
        bot.answerCallbackQuery(query.id);
        return;
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–∏—Ç–∞—Ç—É
    else if (data.startsWith('edit_quote_')) {
        const quoteId = data.split('edit_quote_')[1];
        chatContext[chatId] = { action: 'edit_quote', quoteId };
        await sendBotMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ü–∏—Ç–∞—Ç—ã:');
        bot.answerCallbackQuery(query.id);
        return;
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    if (chatContext[chatId]?.action === 'edit_quote') {
        const quoteId = chatContext[chatId].quoteId;
        const newText = msg.text;
        try {
            const quote = await getQuoteById(quoteId);
            if (!quote) {
                await sendBotMessage(chatId, '–¶–∏—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
                return;
            }
            await updateQuoteById(quoteId, newText, quote.category);
            await sendBotMessage(chatId, '–¶–∏—Ç–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã:', error);
            await sendBotMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã.');
        } finally {
            delete chatContext[chatId];
        }
        return;
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
async function getSavedQuotesFromDatabaseWithPagination(chatId, limit, offset, category = null) {
    let query = `SELECT id, text FROM saved_quotes WHERE chatId = $1`;
    const params = [chatId];
    if (category) {
        query += ` AND category = $2`;
        params.push(category);
    }
    query += ` LIMIT $3 OFFSET $4`;
    params.push(limit, offset);
    const rows = await runQuery(query, params);
    return rows;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ü–∏—Ç–∞—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async function getSavedQuotesFromDatabase(category) {
    const query = `SELECT text FROM saved_quotes WHERE category = $1`;
    const params = [category];
    const rows = await runQuery(query, params);
    return rows;
}

// –ì—Ä–∞—Ü–∏–æ–∑–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
process.on('SIGINT', gracefulShutdown);
process.on('SIGTERM', gracefulShutdown);

async function gracefulShutdown() {
    console.log('–í—ã–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞...');
    await bot.stopPolling();
    await closeDB();
    console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.');
    process.exit(0);
}
